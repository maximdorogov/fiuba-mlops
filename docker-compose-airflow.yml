# docker compose intended for local airflow development with minio as S3 compatible storage
# and Postgres as metadata database.


x-airflow-common:
  &airflow-common
  image: apache/airflow:2.10.1
  environment:
    &airflow-common-env
    PYTHONUNBUFFERED: 1
    AIRFLOW__LOGGING__LOGGING_LEVEL: DEBUG
    AIRFLOW__CORE__LOGGING_LEVEL: DEBUG
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
    _PIP_ADDITIONAL_REQUIREMENTS: "apache-airflow-providers-amazon==9.2.0 boto3 pandas"
    AWS_ACCESS_KEY_ID: minioadmin
    AWS_SECRET_ACCESS_KEY: minioadmin
    MINIO_ENDPOINT: http://minio:9000
    MINIO_BUCKET: csv-data
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/requirements.txt:/requirements.txt
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    - postgres
    - minio

services:
  postgres:
    image: postgres:15
    container_name: postgres_airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-init:
    <<: *airflow-common
    command: >
      bash -c "airflow db migrate &&
               (airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || echo 'User already exists') &&
               (airflow connections add 'minio_conn' --conn-type 'aws' --conn-host 'minio' --conn-port '9000' --conn-extra '{\"endpoint_url\": \"http://minio:9000\", \"aws_access_key_id\": \"minioadmin\", \"aws_secret_access_key\": \"minioadmin\"}' || echo 'Connection already exists') &&
               echo 'Airflow initialization completed successfully'"
    restart: no
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\""]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: minio_airflow
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - s3_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # runs once and exits to create the required S3 buckets
  create_s3_buckets:
    image: minio/mc:latest
    container_name: minio_create_bucket
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc alias set s3 http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb s3/csv-data/incoming;
      /usr/bin/mc mb s3/csv-data/processed;
      exit 0;
      '

networks:
  default:
    driver: bridge

volumes:
  postgres_data:
  s3_data: